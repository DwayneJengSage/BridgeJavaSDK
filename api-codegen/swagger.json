{
  "swagger": "2.0",
  "info": {
    "version": "20161028",
    "title": "Bridge Server API"
  },
  "host": "webservices.sagebridge.org",
  "basePath": "/",
  "securityDefinitions": {
    "BridgeSecurity": {
      "type": "apiKey",
      "in": "header",
      "name": "Bridge-Session"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "parameters": {
    "cacheKey": {
      "name": "cacheKey",
      "description": "Cache key",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "schemaId": {
      "name": "schemaId",
      "description": "Upload schema ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "revision": {
      "name": "revision",
      "description": "Revision number",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "schedulePlanGuid": {
      "name": "schedulePlanGuid",
      "description": "Schedule plan GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "subpopulationGuid": {
      "name": "subpopulationGuid",
      "description": "Subpopulation GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "studyId": {
      "name": "studyId",
      "description": "Study ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "uploadId": {
      "name": "uploadId",
      "description": "Upload ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "userId": {
      "name": "userId",
      "description": "User ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "surveyGuid": {
      "name": "surveyGuid",
      "description": "Survey GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "createdOn": {
      "name": "createdOn",
      "description": "Created on timestamp (ISO 8601)",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "identifier": {
      "name": "identifier",
      "description": "identifier",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "startDate": {
      "name": "startDate",
      "in": "query",
      "description": "The first day to include in reports that are returned",
      "type": "string",
      "format": "date",
      "required": true
    },
    "endDate": {
      "name": "endDate",
      "in": "query",
      "description": "The last day to include in reports that are returned",
      "type": "string",
      "format": "date",
      "required": true
    },
    "startTime": {
      "name": "startTime",
      "in": "query",
      "type": "string",
      "format": "date-time",
      "required": true
    },
    "endTime": {
      "name": "endTime",
      "in": "query",
      "type": "string",
      "format": "date-time",
      "required": true
    },
    "empty": {
      "name": "body",
      "description": "Bridge currently requires an empty JSON object for POSTs without body content",
      "required": true,
      "in": "body",
      "schema": {
        "type": "object",
        "description": "Bridge POST APIs with no body content require an empty json payload (\"{}\").\n"
      }
    }
  },
  "paths": {
    "/v3/auth/signIn": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Send user credentials to authenticate with the Bridge server. Whether the server returns \n200 (user successfully authenticated) or 412 (user has authenticated but has not yet \nconsented to participate in research), the response will contain a user session. \n\nThe session contains the \"sessionToken\" property with the token that must be used to interact \nwith other endpoints of the service. That value should be sent via the request header \n\"Bridge-Session\" to any endpoint requiring authentication. The Bridge session token is \ncurrently valid for 12 hours. However, your client application should be prepared to \nre-authenticate on any call if it returns 401 (\"Not authenticated\"), as the session may \nexpire before this period for unforeseen reasons, like a server failure.\n\nIf the user has not yet consented, the session also contains detailed information about the \nconsent (or consents) the user must submit a signature for, before they will be allowed to \nmake further calls to Bridge. You can also implement logic to re-consent to updated consents, \nif desired.\n",
        "parameters": [
          {
            "name": "SignIn",
            "in": "body",
            "description": "Sign in information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "404": {
            "description": "Credentials incorrect or the user does not exist",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/signOut": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Delete the user's session on the server.\n",
        "parameters": [
          {
            "$ref": "#/parameters/empty"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/auth/requestResetPassword": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Does not require authentication. Will send an email with a link that contains the session \ntoken necessary to reset the password (cannot be done through the API alone). If the user \naccount does not exist, this method will still return 200 in order to prevent \"account \nenumeration\" security breaches.\n",
        "parameters": [
          {
            "name": "Email",
            "in": "body",
            "description": "Email information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/auth/resetPassword": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "This API will not normally be called directly by a client. A user will receive an email \ntriggered by the /requestResetPassword call, with an URL to open up a password reset page \non the Bridge server. That page submits the new password along with a one-time session \ntoken (\"sptoken\") to this endpoint, in order to change the password. The template for the \nemail that is sent can be configured as part of a Study through the management APIs. If \nthe token is not provided or is expired, this request will fail. If the user account does not \nexist, this method will still return 200 in order to prevent \"account enumeration\" security \nbreaches.\n",
        "parameters": [
          {
            "name": "PasswordReset",
            "in": "body",
            "description": "Password reset token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordReset"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "400": {
            "description": "The new password does not meet the password requirements of the study.",
            "schema": {
              "$ref": "#/definitions/InvalidEntityException"
            }
          }
        }
      }
    },
    "/v3/auth/signUp": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Depending on the configuration of the study, the user will normally be sent an email with a link \nto verify his or her email address before the account will be activated. If the user account \ndoes not exist, this method will still return 200 in order to prevent \"account enumeration\" \nsecurity breaches.\n\nOnly basic credentials are necessary to sign up (email, password and study), but all the \ninformation that can be provided for a participant's account can be submitted as part of sign up.\n",
        "parameters": [
          {
            "name": "SignUp",
            "in": "body",
            "description": "Sign up information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          }
        }
      }
    },
    "/v3/auth/verifyEmail": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "This API will not normally be called directly by a client. A user will receive an email \ntriggered by the /signUp call, with an URL to open up a page that verifies the email was \nreceived at the provided email address. This page is on the Bridge server. That page submits \na one-time session token (\"sptoken\") to this endpoint, in order to change the password. The \ntemplate for this verification email can be configured as part of a Study through the management \nAPIs.\n",
        "parameters": [
          {
            "name": "EmailVerification",
            "in": "body",
            "description": "Email verification token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailVerification"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/auth/resendEmailVerification": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Resend an email to the provided email address asking the address holder to verify their \naddress. Whether the email address has been registered or not through sign up, this method\nwill return 200 in order to prevent \"account enumeration\" security breaches.\n",
        "parameters": [
          {
            "name": "EmailVerification",
            "in": "body",
            "description": "Email address of participant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/activities": {
      "get": {
        "summary": "Get a list of the participant's scheduled activities",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Gets all available, started, or scheduled activities for a user. Once an activity is \nfinished, or expires (the time has passed for it to be started), it will be removed \nfrom the list of activities returned to the user.\n",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The user's time zone offset (e.g. +07:00). Scheduled activities will be \nreturned in the timezone submitted at the time of the request. \n",
            "required": true,
            "type": "string"
          },
          {
            "name": "daysAhead",
            "in": "query",
            "required": true,
            "description": "Retrieve activities that are scheduled in the future for the indicated number \nof days past today.\n",
            "type": "integer",
            "minimum": 0,
            "maximum": 5
          },
          {
            "name": "minimumPerSchedule",
            "in": "query",
            "description": "Force a look-ahead on repeating activities until at least the indicated number \nof activities are scheduled (this is applied to the each schedule in the system \nthat applies to this user). The system will then return either the activities \nfor N days, or the minimum number of activities, whichever is the greatest in \nnumber. This setting can help to expose infrequent tasks (weekly, monthly, \netc.) to users.\n",
            "type": "integer",
            "minimum": 0,
            "maximum": 5
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/definitions/ScheduledActivity"
                  }
                },
                "total": {
                  "type": "integer",
                  "readOnly": true,
                  "description": "The total number of records in the items list"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "ResourceList"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "summary": "Update the status of one or more scheduled activities.",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Submit one or more scheduled activities with updated startedOn or finishedOn timestamps. The \nonly values needed in the JSON for each activity are the guid, startedOn and finishedOn fields.\n",
        "parameters": [
          {
            "name": "ScheduledActivity",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScheduledActivity"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/participants": {
      "get": {
        "summary": "Get a paged list of study participants (users)",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "offsetBy",
            "type": "integer",
            "description": "defaults to 0",
            "required": false,
            "in": "query"
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "defaults to 50",
            "minimum": 5,
            "maximum": 100,
            "required": false,
            "in": "query"
          },
          {
            "name": "emailFilter",
            "type": "string",
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_AccountSummary"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "post": {
        "summary": "Create a new study participant (user)",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "StudyParticipant",
            "in": "body",
            "description": "Study participant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/self": {
      "get": {
        "summary": "Get user's participant record",
        "description": "Get the current user's participant record. Any authenticated user may call this endpoint.  \n**The user does not need to have consented to the study in order to access their participant \nrecord.** \n",
        "tags": [
          "Participants",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "summary": "Update user's participant record",
        "description": "Update the current user's participant record. **Unlike most other calls in this API, you can send \npartically complete JSON to this endpoint,** and it will selectively update the participant's record \n(rather than treating missing properties as an instruction to delete those fields in the record). \nThis means that many existing APIs that sent a single update value, can direct those payloads to \nthis endpoint and they will still work fine. For this reason most `/v3/users/*` endpoints are \nnow deprecated, though there is no plan to remove them. Any authenticated user may call this \nendpoint. **The user does not need to have consented to the study in order to update their participant \nrecord.** \n",
        "tags": [
          "Participants",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "StudyParticipant",
            "in": "body",
            "description": "Study participant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/participants/{userId}": {
      "get": {
        "summary": "Get a study participant (user) record",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "post": {
        "summary": "Update an existing study participant (user) record",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "StudyParticipant",
            "in": "body",
            "description": "Study participant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/uploads": {
      "get": {
        "summary": "Get a study participant's upload history",
        "description": "Retrieve information about the uploads from a user. This is particularly useful during \ndevelopment to verify the mobile application is sending valid data back to the Bridge \nserver. The API can retrieve up to 2 days worth of upload records, defined by the \nstartTime and endTime timestamps (ISO 8601 format). startTime/endTime are optional and \nwill default to the last 24 hours of uploads. if the endTime is not provided, it will \nbe one day after the startTime. If the startTime is not provided, it will be one day \nbefore the endTime.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "startTime",
            "in": "query",
            "type": "string",
            "format": "date-time",
            "description": "Defaults to one day ago (24 hours)"
          },
          {
            "name": "endTime",
            "in": "query",
            "type": "string",
            "format": "date-time",
            "description": "Defaults to time stamp for time of request (\"now\")"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Upload"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/requestInfo": {
      "get": {
        "summary": "Get information about the last request made by this participant",
        "description": "Retrieves information about the user agent headers and participant settings that were in \neffect the last time this participant contacted the Bridge server. Also provides the last \ntime activities were retrieved and uploads were sent back to the server.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/activities": {
      "get": {
        "summary": "Get paged history of activities scheduled for a participant",
        "description": "Provides a view of all the activities that have been created for a participant. The state of these activities is \nreturned without modification. No filtering is performed on the list of activities, which may have been assigned \ndue to different or changing filtering criteria. These records help to determine if a participant is currently active \nin the study (e.g. if there are no activities, the user has never asked for them them). Records are sorted first \nby the type of activity, and then by the date the activity was scheduled to start on.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "offsetKey",
            "in": "query",
            "type": "string",
            "description": "The identifier to use as the first record of the returned page of activities"
          },
          {
            "name": "pageSize",
            "in": "query",
            "type": "integer",
            "description": "The number of records to return in the query (defaults to 10)."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Activity"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "delete": {
        "summary": "Delete all activities for a participant",
        "description": "Intended for use in development. Developers may wish to delete an account's scheduled activities in order \nto see the impact of changes to schedules for a study. Otherwise, activities from the original \nscheduling will persist until they expire, alongside tasks issued for the newly changed schedule. **This \nshould not be called on production accounts.**\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/signOut": {
      "post": {
        "summary": "Sign the user out and delete their server session",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/empty"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/requestResetPassword": {
      "post": {
        "summary": "Trigger a request to reset password for this user",
        "description": "When called, a reset password email will be set to the email address for this account.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/resendEmailVerification": {
      "post": {
        "summary": "Resend an email verification email to this user",
        "description": "When called, resends the email to the user's email account, which contains a link they must \nclick on to verify they control that email address. Account is not activated until this is \ndone.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/consents/withdraw": {
      "post": {
        "summary": "Withdraw the participant from the study entirely",
        "description": "This endpoint will withdraw the user from any and all signed consents in the study, and \nset their sharing status to \"no_sharing\". The user is withdrawn from all subpopulations \nin the study whether they currently apply to the user or not. Unless you have more \ncomplicated consent requirements (like an optional consent that can be signed or not), \nthis is the best approach to withdrawing a user from a study.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "withdrawal",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/consents/{subpopulationGuid}/resendConsent": {
      "post": {
        "summary": "Re-send the consent agreement for this subpopulation",
        "description": "When called, re-sends a signed consent agreement document to the participant's email address.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/reports/{identifier}": {
      "get": {
        "summary": "Get participant report records",
        "tags": [
          "Reports",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_ReportData"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "post": {
        "summary": "Add a participant report record",
        "tags": [
          "Reports",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "summary": "Delete a participant report (all records)",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/participants/{userId}/reports/{identifier}/{date}": {
      "delete": {
        "summary": "Delete a record for a specific day of a participant report",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "date",
            "description": "Date of records",
            "required": true,
            "in": "path",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/participants/reports/{identifier}": {
      "post": {
        "summary": "Add a participant report record",
        "description": "Endpoint for a worker to add a report record for a participant. Unlike other endpoints, \nthe worker must provide the healthCode of the target user (this endpoint allows external \nprocesses working with data from Synapse to write reports back to Bridge). \n",
        "tags": [
          "Reports",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "report data",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportDataWithHealthCode"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      },
      "delete": {
        "summary": "Delete a participant report index",
        "description": "Delete a participant report index. These indices can be shared between users so they \nare not normally deleted, but this endpoint allows the index identifiers to be deleted \nduring testing.\n",
        "tags": [
          "Reports",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/subpopulations": {
      "get": {
        "summary": "Get all subpopulations in this study",
        "tags": [
          "Subpopulations",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Subpopulation"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "summary": "Create a new subpopulation",
        "tags": [
          "Subpopulations",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "Subpopulation",
            "in": "body",
            "description": "New subpopulation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subpopulation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}": {
      "get": {
        "summary": "Get a subpopulation",
        "tags": [
          "Subpopulations",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Subpopulation"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "summary": "Update an existing subpopulation",
        "tags": [
          "Subpopulations",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "Subpopulation",
            "description": "A subpopulation",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Subpopulation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "summary": "Delete a subpopulation",
        "description": "Delete a subpopulation unless it is a default subpopulation, which cannot be deleted. \nIf this is a \n",
        "tags": [
          "Subpopulations",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "in": "query",
            "name": "physical",
            "type": "boolean",
            "required": false,
            "default": false,
            "description": "If an admin sets this query value to true, the subpopulation will be permanently\ndeleted from the database (used for testing).\n"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/signature": {
      "get": {
        "summary": "Get the participant's consent signature for the subpopulation",
        "description": "",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConsentSignature"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "summary": "Consent to this subpopulation by submitting a signature",
        "description": "Agree to the terms of participant represented by this subpopulation, by submitting a \nsignature to the Bridge server.\n",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "body",
            "description": "A consent signature",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConsentSignature"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/signature/withdraw": {
      "post": {
        "summary": "Withdraw participant from this subpopulation consent group",
        "description": "This withdraws the user from only one subpopulation.\n",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "withdrawal",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/signature/email": {
      "post": {
        "summary": "Email the consent agreement to the participant's email address",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "$ref": "#/parameters/empty"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/consents": {
      "get": {
        "summary": "Get all revisions of the consent in a study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "summary": "Add new consent revision to the study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/consents/recent": {
      "get": {
        "summary": "Get most recent revision of a study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/consents/published": {
      "get": {
        "summary": "Get most recently published revision of a study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/consents/{createdOn}": {
      "get": {
        "summary": "Get specific revision of a study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents": {
      "get": {
        "summary": "Get a list of all consents for this subpopulation",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "summary": "Add a new study consent version to this subpopulation",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "Study consent",
            "description": "Study consent",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/recent": {
      "get": {
        "summary": "Get the most recently created consent revision",
        "description": "Get the most recently created revision of this subpopulation consent. This is not \nnecessarily the published version of the consent.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/published": {
      "get": {
        "summary": "Get the published consent revision",
        "description": "Get the published revision of this subpopulation consent. This is not necessarily the \nmost recent version of the consent.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/{createdOn}": {
      "get": {
        "summary": "Get a specific consent revision",
        "description": "Get a specific revision of this subpopulation consent by its creation timestamp.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "createdOn",
            "description": "creation timestamp of the revision",
            "type": "string",
            "format": "date-time",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/{createdOn}/publish": {
      "post": {
        "summary": "Publish a specific consent revision",
        "description": "Publish a specific revision of this subpopulation consent by its creation timestamp. This version of \nthe consent will be presented to users in order to participate in this subpopulation. If users have \nsigned any other revision of this consent, the `signedMostRecentConsent` flag in the consent status \nrecord for this consent (in the user's session) will be false. However, the user is still considered to \nbe consented and will not be shut out of performing operations with a 412 response.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "createdOn",
            "description": "creation timestamp of the revision",
            "type": "string",
            "format": "date-time",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/empty"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/users": {
      "post": {
        "summary": "Create a new user",
        "tags": [
          "Users",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "StudyParticipant",
            "in": "body",
            "description": "New user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/users/{userId}": {
      "delete": {
        "summary": "Delete a user",
        "description": "This is a heavyweight operation; it is better to disable a user account when possible. \nThis endpoint exists mostly for tests and cases where governance dictates the deletion \nof as much user data as possible. \n",
        "tags": [
          "Users",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/users/self": {
      "get": {
        "deprecated": true,
        "summary": "Retrieve the user profile for this account.",
        "description": "Returns a user profile object that is a subset of the study participant record (which has superceded \nthe profile along with a new set of APIs, see `/v3/participants/self`). Updating the profile will \nupdate the participant record, and vice versa. The user does *not* have to be consented to the study \nto retrieve or update the study profile (just as a user may submit updates to the study participant at sign up).\n",
        "tags": [
          "Users",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "deprecated": true,
        "summary": "Update the user profile",
        "description": "Updates a user profile object that is a subset of the study participant record (which has superceded \nthe profile along with a new set of APIs, see `/v3/participants/self`). Updating the profile will \nupdate the participant record, and vice versa. The user does *not* have to be consented to the study \nto retrieve or update the study profile (just as a user may submit updates to the study participant at sign up).\n",
        "tags": [
          "Users",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UserProfile",
            "in": "body",
            "description": "Updated profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/users/self/externalId": {
      "post": {
        "deprecated": true,
        "summary": "Update the user's external ID",
        "description": "Change the external ID of this user. Note that this value can be changed through the \n`/v3/participants/self` API, using the same JSON payload defined here. \n",
        "tags": [
          "Users",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "ExternalIdentifier",
            "in": "body",
            "description": "External identifier",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/users/self/emailData": {
      "post": {
        "summary": "Make user's data available for download",
        "description": "Asynchronously request the uploaded data for this user, in a given time range (inclusive). \nBridge server will gather the user's data for the given time zone and email a secure link \nto the user's registered email address. \n",
        "tags": [
          "Users",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "DateRange",
            "in": "body",
            "description": "Date range",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DateRange"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/users/self/dataSharing": {
      "post": {
        "deprecated": true,
        "summary": "Change user's data sharing",
        "description": "Change the user's data sharing option to one of the allowable values. Note that this value can \nbe changed through the `/v3/participants/self` API, using the same JSON payload defined here.\n",
        "tags": [
          "Users",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "SharingScope",
            "in": "body",
            "description": "Sharing scope",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SharingScope"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/users/self/dataGroups": {
      "get": {
        "deprecated": true,
        "summary": "Get a user's data groups.",
        "description": "Get the user's data groups. Note that data groups are also part of the study participant \nrecord, and can be retrieved through the `/v3/participants/self` API.\n",
        "tags": [
          "Users",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataGroups"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "deprecated": true,
        "summary": "Change user's data groups",
        "description": "Change the user's data groups. Valid values must have been defined first by the study. \nNote that this value can be changed through the `/v3/participants/self` API, using \nthe same JSON payload defined here.\n",
        "tags": [
          "Users",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "DataGroups",
            "in": "body",
            "description": "Data groups",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataGroups"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/users/self/reports/{identifier}": {
      "get": {
        "summary": "Get a participant report",
        "description": "Get the records for a specific participant report. Participants can get reports for their own \naccount. Note that this call does not require consent, but does require authentication. \n",
        "tags": [
          "Users",
          "Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "Report records for the participant",
            "schema": {
              "$ref": "#/definitions/ResourceList_ReportData"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/reports": {
      "get": {
        "summary": "Get list of report indices for studies or participants",
        "tags": [
          "Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type (either study or participant)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_ReportIndex"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/reports/{identifier}": {
      "get": {
        "summary": "Get study report records",
        "tags": [
          "Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_ReportData"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "summary": "Add a record to a study report",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "body",
            "description": "Report data",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportData"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      },
      "delete": {
        "summary": "Delete a study report (all records)",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/reports/{identifier}/{date}": {
      "delete": {
        "summary": "Delete a record for a specific day of a study report",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "date",
            "description": "Date of records",
            "required": true,
            "in": "path",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/surveys": {
      "get": {
        "summary": "Get most recent version of each survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "summary": "Create a new survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "survey",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/recent": {
      "$ref": "#/paths/~1v3~1surveys"
    },
    "/v3/surveys/published": {
      "get": {
        "summary": "Get the most recently published version of each survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions": {
      "get": {
        "summary": "Get all revisions of a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/recent": {
      "get": {
        "summary": "Get most recent revision of a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/published": {
      "get": {
        "summary": "Get most recently published revision of a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/{createdOn}": {
      "get": {
        "summary": "Get a survey revision",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "summary": "Update a non-published survey revision",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "name": "Survey",
            "in": "body",
            "description": "Updated survey",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "summary": "Delete a survey version",
        "tags": [
          "Surveys",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "name": "physical",
            "description": "Physically delete the survey (admins only)",
            "default": false,
            "required": false,
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/{createdOn}/version": {
      "post": {
        "summary": "Version a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "$ref": "#/parameters/empty"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/{createdOn}/publish": {
      "post": {
        "summary": "Publish a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "$ref": "#/parameters/empty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/schedules": {
      "get": {
        "summary": "Get schedules for user",
        "description": "This endpoint is the same as `/v4/schedules` except that any schedule with a cron trigger \nis marked as being persistent. This is for legacy reasons and the v4 endpoint should be \nused.\n",
        "deprecated": true,
        "tags": [
          "Schedules",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Schedule"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v4/schedules": {
      "get": {
        "summary": "Get schedules for user",
        "tags": [
          "Schedules",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Schedule"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploads": {
      "post": {
        "summary": "Request an upload session",
        "tags": [
          "Uploads",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UploadRequest",
            "in": "body",
            "description": "An upload request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploads/{uploadId}/complete": {
      "post": {
        "summary": "Notify Bridge an upload is complete",
        "description": "Notify Bridge an upload is complete. Either a consented user or a worker \nprocess can access this endpoing, but failure to have the worker role will \nbe treated like a consent error. \n",
        "tags": [
          "Uploads",
          "_For Workers",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uploadId"
          },
          {
            "$ref": "#/parameters/empty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploadstatus/{uploadId}": {
      "get": {
        "summary": "Get status of a single upload attempt",
        "description": "Caller must either be a participant getting a status of one of the participant's \nown uploads, or a reearcher.\n",
        "tags": [
          "Uploads",
          "_For Consented Users",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uploadId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadValidationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploadschemas": {
      "get": {
        "summary": "Get most recent revision of all upload schemas",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "summary": "Create or update an upload schema",
        "deprecated": true,
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UploadSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v4/uploadschemas": {
      "post": {
        "summary": "Create an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UploadSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v4/uploadschemas/{schemaId}/revisions/{revision}": {
      "post": {
        "summary": "Update an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          },
          {
            "name": "UploadSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/uploadschemas/{schemaId}": {
      "get": {
        "summary": "Get all revisions of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "summary": "Delete all revisions of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/uploadschemas/{schemaId}/recent": {
      "get": {
        "summary": "Get the most recent revision of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/uploadschemas/{schemaId}/revisions/{revision}": {
      "get": {
        "summary": "Get the specific revision of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      },
      "delete": {
        "summary": "Delete a revision of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/scheduleplans": {
      "get": {
        "summary": "Get schedule plans",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_SchedulePlan"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "summary": "Create a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SchedulePlan"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/scheduleplans/{schedulePlanGuid}": {
      "get": {
        "summary": "Get a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schedulePlanGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SchedulePlan"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "summary": "Update a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schedulePlanGuid"
          },
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SchedulePlan"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "summary": "Get a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schedulePlanGuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies": {
      "get": {
        "summary": "Get all studies",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "format",
            "required": false,
            "in": "query",
            "type": "string",
            "enum": [
              "summary"
            ],
            "description": "If true, anyone can call this endpoint and return a list of truncated study objects\n(name and study identifier only). Otherwise, caller must be an admin.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Study"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      },
      "post": {
        "summary": "Create a new study",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/studies/self": {
      "get": {
        "summary": "Get a study",
        "tags": [
          "Studies",
          "_For Developers",
          "_For Researchers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher_admin"
          }
        }
      },
      "post": {
        "summary": "Update a study",
        "tags": [
          "Studies",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies/{studyId}": {
      "get": {
        "summary": "Get a study",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      },
      "post": {
        "summary": "Update a study",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          },
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      },
      "delete": {
        "summary": "Delete a study",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/studies/self/publicKey": {
      "get": {
        "summary": "Get the public key CMS block for this study",
        "tags": [
          "Studies",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CmsPublicKey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies/self/emailStatus": {
      "get": {
        "summary": "SES email verification status",
        "description": "Consents will be emailed from the support email address you provide. Amazon \nSES will ask the holder of that address to confirm this is OK.\n",
        "tags": [
          "Studies",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmailVerificationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies/self/verifyEmail": {
      "post": {
        "summary": "Trigger SES email verification process",
        "description": "Amazon SES will attempt to verify that it can send email from your support email address. \nIf that fails or expires, this API will trigger another request to verify.\n",
        "tags": [
          "Studies",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/empty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmailVerificationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/studies/self/uploads": {
      "get": {
        "summary": "Get uploads for a study",
        "tags": [
          "Studies",
          "Uploads",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Upload"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/externalIds": {
      "get": {
        "summary": "Get external IDs",
        "tags": [
          "External Identifiers",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "offsetKey",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "pageSize",
            "type": "integer",
            "in": "query",
            "required": true
          },
          {
            "name": "idFilter",
            "type": "string",
            "in": "query"
          },
          {
            "name": "assignmentFilter",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_ExternalIdentifier"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "summary": "Add external IDs to the study",
        "tags": [
          "External Identifiers",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "summary": "Delete one or more external IDs",
        "tags": [
          "External Identifiers",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "externalId",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies/{studyId}/surveys/published": {
      "get": {
        "summary": "Get the published surveys in a study",
        "tags": [
          "Studies",
          "Surveys",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceList_Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v3/studies/{studyId}/uploadschemas/{schemaId}/revisions/{revision}": {
      "get": {
        "summary": "Get a schema revision from a study",
        "tags": [
          "Studies",
          "Surveys",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          },
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v3/cache": {
      "get": {
        "summary": "Get all the non-session Redis keys",
        "tags": [
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "total": {
                  "type": "integer",
                  "readOnly": true,
                  "description": "The total number of records in the items list"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "ResourceList"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/cache/{cacheKey}": {
      "delete": {
        "summary": "Get all the non-session Redis keys",
        "tags": [
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheKey"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/recordexportstatuses": {
      "post": {
        "summary": "Updates the status of an export job",
        "description": "Updates the status of an export job on the health data records included in that job.\n",
        "tags": [
          "Record Export Statuses",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "RecordExportStatusRequest",
            "in": "body",
            "description": "A record export status request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecordExportStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    }
  },
  "definitions": {
    "ABTestGroup": {
      "type": "object",
      "description": "A list of these groups define the way schedules are allocated in an ABTestScheduleStrategy.\n",
      "properties": {
        "percentage": {
          "type": "integer",
          "description": "The percentage of users to assign to this schedule"
        },
        "schedule": {
          "description": "the schedule to assign to these users",
          "$ref": "#/definitions/Schedule"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ScheduleGroup"
          ]
        }
      }
    },
    "ABTestScheduleStrategy": {
      "description": "A strategy that divides users into groups according to a percentage scheme, assigning each \ngroup a different Schedule. The combined set of schedule groups should have percentages that \nadd up to 100%. After the initial assignment, new users joining the study will be randomly \nassigned to one of the groups in proportion to their percentage representation in the study.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "scheduleGroups"
          ]
        },
        {
          "properties": {
            "scheduleGroups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ABTestGroup"
              }
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "ABTestScheduleStrategy"
              ]
            }
          }
        }
      ]
    },
    "AbstractStudyParticipant": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name (given name) of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name (family name) of the user."
        },
        "email": {
          "type": "string",
          "description": "The user's email address. Users can create an account in multiple studies on Bridge; these accounts are entirely separate."
        },
        "externalId": {
          "type": "string",
          "description": "An externally-assignable identifier a research partner can use to re-identify a user's data \nin the exported data set (this must be provided by the application, it is not created by Bridge). \nIf external IDs are managed, this is required on creation and cannot be modified after the \naccount is created. Otherwise, it is a string that can be set to any value, changed, removed, etc.\n"
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "An ID assigned to identify this user as an account in the Bridge system. This is separate from the healthCode and the two are never associated in the API or the data exported from Bridge. Used to retrieve study participant information through the API."
        },
        "notifyByEmail": {
          "type": "boolean",
          "default": true,
          "description": "True if the user has consented to be contacted via email outside the application, false otherwise.\n"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of user profile attributes that have been set for this user (the attributes themselves \nmust be specified in the study's configuration, and the values are stored encrypted in case they \nare personally-identifying information).\n"
        },
        "sharingScope": {
          "type": "string",
          "description": "How far does this user wish to share data?\n\n|Scope|Description|\n|---|---|\n|no_sharing|User does not wish to share data. Note that in some early applications, this is the equivalent of withdrawing from a study, and should be treated as such.|\n|sponsors_and_partners|Share data in data sets that are available to the study researchers and their researcher partners only.|\n|all_qualified_researchers|Share data with researchers who qualify under the specific governance qualifications to access the study's data set. These researchers may do research on new questions after the lifetime of the initial research.|\n",
          "enum": [
            "no_sharing",
            "sponsors_and_partners",
            "all_qualified_researchers"
          ]
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "An enumeration of the status of the user's account:\n\n|Status|Description|\n|---|---|\n|disabled|Account has been disabled. The account appears not to exist while it is in this state. Bridge does not automatically disable accounts for any reason, but researchers can disable accounts if needed.|\n|unverified|Account has been created but the user has yet to verify the email address. The account appears not to exist while it is in this state.|\n|enabled|Account is active and usable.|\n\nOn creation, the initial status of a user account depends on the email verification policy set \nfor the study. If verification is required, the account will be unverified until that is done; \notherwise it will be enabled.\n",
          "enum": [
            "disabled",
            "enabled",
            "unverified"
          ]
        },
        "roles": {
          "type": "array",
          "description": "The roles assigned to this user. Normal study participants do not have any roles assigned, but for \ndevelopers, researchers, etc. their roles will appear hear (see main API documentation about the \nroles assigned by the Bridge server).\n",
          "items": {
            "type": "string",
            "enum": [
              "developer",
              "researcher",
              "admin",
              "worker"
            ]
          }
        },
        "dataGroups": {
          "type": "array",
          "description": "data groups to apply to this user",
          "items": {
            "type": "string"
          }
        },
        "languages": {
          "type": "array",
          "description": "Two letter language codes to assign to this user (these are initially retrieved from the \nuser's Accept-Language header, but are persisted after this as part of the user's options \nand it can be updated later).\n",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AccountSummary": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "id",
        "createdOn",
        "status",
        "studyIdentifier"
      ],
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First (given) name of user."
        },
        "lastName": {
          "type": "string",
          "description": "Last (family) name of user."
        },
        "email": {
          "type": "string",
          "description": "Email address of user."
        },
        "id": {
          "type": "string",
          "description": "An identifier assigned to this user, used to retrieve a study participant record."
        },
        "creatdOn": {
          "type": "string",
          "format": "date-time",
          "description": "Read only. ISO 8601 date and time that the user account was created."
        },
        "status": {
          "type": "string",
          "description": "User account status. `unverified` indicates the user has not verified their email address.",
          "enum": [
            "enabled",
            "disabled",
            "unverified"
          ]
        },
        "studyIdentifier": {
          "$ref": "#/definitions/StudyIdentifier"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "AccountSummary"
          ]
        }
      }
    },
    "Activity": {
      "description": "When creating an activity as part of a Schedule, you will need to supply a SurveyReference or a TaskReference in the activity. When these are returned, any survey reference that points to the \"most recently published\" survey will be resolved to a specific survey revision (the one most recently published).\n\nTasks may be requested into the future by the client, and then cached. So if a survey is changed and published, it may be some time before participants receive the updated survey.\n",
      "type": "object",
      "required": [
        "label",
        "guid",
        "activityType"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "A label to show the user for this activity."
        },
        "labelDetail": {
          "type": "string",
          "description": "Detail information for the activity (common uses have included indicating the number of \nquestions, or the average time it takes to complete the activity).\n"
        },
        "guid": {
          "type": "string"
        },
        "task": {
          "$ref": "#/definitions/TaskReference"
        },
        "survey": {
          "$ref": "#/definitions/SurveyReference"
        },
        "activityType": {
          "type": "string",
          "enum": [
            "survey",
            "task"
          ],
          "description": "If the activityType is set to `survey`, the activity should contain a survey stanza;\nif the activityType is set to `task`, the activity should contain a task stanza. An activity \nshould not contain both. \n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Activity"
          ]
        }
      }
    },
    "ClientInfo": {
      "description": "Describes the content of the `User-Agent` field in the format that is accepted and understandable to the Bridge server (see [REST API getting started](/articles/rest.html)).",
      "type": "object",
      "properties": {
        "appName": {
          "type": "string",
          "description": "The name of the application"
        },
        "appVersion": {
          "type": "integer",
          "description": "The version of the application (must be a number, and should increase with every \nnew release of the application)\n"
        },
        "deviceName": {
          "type": "string",
          "description": "Information about the device"
        },
        "osName": {
          "type": "string",
          "description": "The name of the operating system (conventional names are \"Android\" and \"iPhone OS\").\n"
        },
        "osVersion": {
          "type": "string",
          "description": "The version of the operating system (can be a semantic version such as X.Y.Z)"
        },
        "sdkName": {
          "type": "string",
          "description": "The name of the SDK being used"
        },
        "sdkVersion": {
          "type": "integer",
          "description": "The version of the SDK being used"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ClientInfo"
          ]
        }
      }
    },
    "CmsPublicKey": {
      "type": "object",
      "required": [
        "publicKey"
      ],
      "properties": {
        "publicKey": {
          "type": "string",
          "description": "Base 64 encoded version of the public key for CMS encryption of data that is uploaded \nto the Bridge server. Each study has a different CMS public key.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "CmsPublicKey"
          ]
        }
      }
    },
    "ConsentSignature": {
      "description": "To consent to participation in a subpopulation (also known as a consent group), participants submit \ntheir electronic signature which can include an image of their actual signature. \n\nIn addition, participants submit a decision on how widely they will share their medical information with researchers (see the scope property of the ConsentSignature JSON object, below).\n\nHow you describe this choice to participants is important if they are to correctly understand the consequences of this decision. We strongly suggest that applications present the following language to users when making this choice:\n\n* **Option #1:** No data sharing. I do not agree to share my coded data (without my name) at this time;\n* **Option #2:** I agree to share my coded data (without my name) with researchers at the sponsor institution, and their partners, in order to conduct this study;\n* **Option #3:** I agree to share my coded data (without my name) with qualified researchers worldwide, for general health research.\n",
      "type": "object",
      "required": [
        "name",
        "birthdate",
        "consentCreatedOn",
        "signedOn"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The participant's name."
        },
        "birthdate": {
          "type": "string",
          "format": "date",
          "description": "The participant's date of birth in ISO 8601 format (YYYY-MM-DD)."
        },
        "imageData": {
          "type": "string",
          "format": "binary",
          "description": "Base 64 encoded image of the participant's signature"
        },
        "imageMimeType": {
          "type": "string",
          "description": "mime type of this image (e.g. \"image/png\"). Should only be present if imageData is present."
        },
        "consentCreatedOn": {
          "type": "string",
          "description": "The timestamp of the version of the subpopulation consent that was \npresented to the participant for agreement. \n",
          "format": "date-time"
        },
        "signedOn": {
          "type": "string",
          "description": "The date and time of agreement to this consent.\n",
          "format": "date-time"
        },
        "withdrewOn": {
          "type": "string",
          "description": "If this consent is later revoked, this is the date of revocation.\n",
          "format": "date-time"
        },
        "scope": {
          "type": "string",
          "description": "|Enum|Description|\n|---|---|\n|no_sharing| don't share data generated by this participant (option #1, above);|\n|sponsors_and_partners|share data in data sets that are available to the study researchers and their researcher partners only (option #2, above)|\n|all_qualified_researchers|share data with researchers who qualify under the specific governance qualifications to access the study's data set|\n",
          "enum": [
            "no_sharing",
            "sponsors_and_partners",
            "all_qualified_researchers"
          ]
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ConsentSignature"
          ]
        }
      }
    },
    "ConsentStatus": {
      "type": "object",
      "required": [
        "name",
        "subpopulationGuid",
        "required",
        "consented",
        "signedMostRecentConsent"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the subpopulation"
        },
        "subpopulationGuid": {
          "type": "string",
          "description": "The GUID for the subpopulation of this consent"
        },
        "required": {
          "type": "boolean",
          "description": "Is this consent required? If required, the user must consent to it before being given \naccess to the server (until signed, a 412 response is returned from the server).\n"
        },
        "consented": {
          "type": "boolean",
          "description": "Has the participant consented to this consent agreement?"
        },
        "signedMostRecentConsent": {
          "type": "boolean",
          "description": "Was the consent to participate made against the most recently published version of this consent?"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ConsentStatus"
          ]
        }
      }
    },
    "Criteria": {
      "type": "object",
      "description": "Some objects, like Subpopulations and the schedules in a CriteriaScheduleStrategy, are \nmatched against user criteria in order to return the correct object. The criteria \nagainst which user information will be matched are described in the Criteria object. \n",
      "properties": {
        "language": {
          "type": "string",
          "description": "A two-letter language code. User must declare this a language they can\nuse to match this object.\n"
        },
        "allOfGroups": {
          "type": "array",
          "description": "One or more data groups; user must have all these data groups to match",
          "items": {
            "type": "string"
          }
        },
        "noneOfGroups": {
          "type": "array",
          "description": "One or more data groups; user must have none of these data groups to match",
          "items": {
            "type": "string"
          }
        },
        "minAppVersion": {
          "type": "object",
          "description": "A map of operating system names to a minimum app version. User must send a version \nequal to or greater than this to match this object.\n",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "maxAppVersion": {
          "type": "object",
          "description": "A map of operating system names to a maximum app version. User must send a version \nequal to or less than this to match this object.\n",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Criteria"
          ]
        }
      }
    },
    "CriteriaScheduleStrategy": {
      "description": "Select the first schedule in a list of schedules that matches the criteria being submitted\nby the participant. Criteria includes factors like the user's app platform and version, their \nlanguage, and data groups that are assigned to the user.  \n",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "scheduleCriteria",
            "type"
          ]
        },
        {
          "properties": {
            "scheduleCriteria": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScheduleCriteria"
              }
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "CriteriaScheduleStrategy"
              ]
            }
          }
        }
      ]
    },
    "DataGroups": {
      "type": "object",
      "description": "A payload that contains a string array of data groups.",
      "required": [
        "dataGroups"
      ],
      "properties": {
        "dataGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DataGroups"
          ]
        }
      }
    },
    "DateRange": {
      "type": "object",
      "required": [
        "startDate",
        "endDate"
      ],
      "properties": {
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "start date of the date range"
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "end date of the date range"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DateRange"
          ]
        }
      }
    },
    "Email": {
      "type": "object",
      "required": [
        "name",
        "studyIdentifier"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "Participant's email."
        },
        "studyIdentifier": {
          "type": "string",
          "description": "String identifier if the participant's study."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Email"
          ]
        }
      }
    },
    "EmailTemplate": {
      "type": "object",
      "description": "A template for one of the system emails that are sent. In the templates, variable strings can \nbe used to interpolate values from the study or the individual to which the email is being sent. \nThe body of the email template must have a ${url} variable, this is where the link back to the \nBridge server will be inserted in order to complete the email verification/password reset.\n\n|Template Variable|What it will be replaced with|\n|---|---|\n|${url}|Where the link back to the Bridge server will be inserted in order to complete the email verification/password reset|\n|${studyName}|The name of the study|\n|${sponsorName}|The sponsor of the study|\n|${supportEmail}|The support email for the study|\n|${technicalEmail}|The technical support email for the study|\n|${account.givenName}|User's first name|\n|${account.surname}|User's last name|\n|${account.email}|User's email|\n\nYour HTML will be sanitized to remove potential security issues like scripts, frames or embedded Flash objects.\n",
      "required": [
        "subject",
        "mimeType",
        "body"
      ],
      "properties": {
        "subject": {
          "type": "string",
          "description": "The subject line of the email message (no markup allowed)"
        },
        "mimeType": {
          "type": "string",
          "enum": [
            "text/plain",
            "text/html"
          ]
        },
        "body": {
          "type": "string",
          "description": "The body text of the email message (can be text or HTML, but the mimeType must be set appropriately)"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "EmailTemplate"
          ]
        }
      }
    },
    "EmailVerification": {
      "type": "object",
      "required": [
        "sptoken"
      ],
      "properties": {
        "sptoken": {
          "type": "string",
          "description": "The token sent via email to the user that is needed to verify the email address is accessible to that user"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "EmailVerification"
          ]
        }
      }
    },
    "EmailVerificationStatus": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of verifying support email address.",
          "enum": [
            "unverified",
            "pending",
            "verified"
          ]
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "EmailVerificationStatus"
          ]
        }
      }
    },
    "Empty": {
      "$ref": "#/parameters/empty/schema"
    },
    "ExternalIdentifier": {
      "type": "object",
      "required": [
        "identifier",
        "assigned"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The external identifier."
        },
        "assigned": {
          "type": "boolean",
          "description": "If true, the identifier has been assigned to an account, otherwise false."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ExternalIdentifier"
          ]
        }
      }
    },
    "GuidCreatedOnVersionHolder": {
      "description": "An object that describes the keys and optimistic lock values of a Survey. This object\nis returned from create and update endpoints rather than an entire Survey.\n",
      "type": "object",
      "required": [
        "guid",
        "createdOn",
        "version"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "description": "The guid of the survey (added when the survey is created)."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The createdOn value of the survey (added when survey is created)."
        },
        "version": {
          "type": "integer",
          "description": "The optimistic locking version of the survey (increments when the survey is \nupdated). If a survey is submitted with a version that is not the currently saved \nversion of the survey, a 409 (Conflict) error will occur.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "GuidCreatedOnVersionHolder"
          ]
        }
      }
    },
    "GuidVersionHolder": {
      "description": "An object that describes the keys and optimistic lock values of an entity (e.g. a \nSubpopulation or SchedulePlan). This object is returned from create and update endpoints \nrather than an entire entity.\n",
      "type": "object",
      "required": [
        "guid",
        "version"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "description": "The guid of the entity (added when the entity is created)."
        },
        "version": {
          "type": "integer",
          "description": "The optimistic locking version of the survey (increments when the entity is \nupdated). If an entity is submitted with a version that is not the currently saved \nversion of the entity, a 409 (Conflict) error will occur.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "GuidVersionHolder"
          ]
        }
      }
    },
    "HealthDataRecord": {
      "description": "See [Bridge Upload Data Format](/articles/study_design/upload_data_format.html) for details abot this model object.\n",
      "type": "object",
      "properties": {
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "ISO timestamp of when the data record was created, as reported by the submitting app"
        },
        "data": {
          "type": "object",
          "description": "JSON map with key value pairs representing the record's data."
        },
        "id": {
          "type": "string",
          "description": "A unique GUID for this record."
        },
        "metadata": {
          "type": "object",
          "description": "Arbitrary JSON blob of record metadata, as submitted by the app. For \nResearchKit-based apps, this is info.json verbatim.\n"
        },
        "schemaId": {
          "type": "string",
          "description": "Schema ID for the record."
        },
        "schemaRevision": {
          "type": "integer",
          "description": "Schema revision for the record."
        },
        "studyId": {
          "type": "string",
          "description": "Study that this record lives in."
        },
        "uploadDate": {
          "type": "string",
          "format": "date",
          "description": "Calendar date in YYYY-MM-DD format representing when the server received the upload, \nusing the server's local time zone (US Pacific timezone).\n"
        },
        "uploadId": {
          "type": "string",
          "description": "The upload GUID of the upload this record is processed from."
        },
        "uploadedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time of the upload."
        },
        "userSharingScope": {
          "type": "string",
          "description": "The user's sharing scope at the time of this upload's submission.",
          "enum": [
            "no_sharing",
            "sponsors_and_partners",
            "all_qualified_researchers"
          ]
        },
        "userExternalId": {
          "type": "string",
          "description": "The user's external ID at the time of this upload's submission."
        },
        "userDataGroups": {
          "type": "array",
          "description": "The user's data groups at the time of this upload's submission.",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "description": "A version number issued for optimistic locking of record updates. Should not be \nset when creating a new health data record. When updating a record retrieved from \nthe API, the object will have the version attribute and this must match the last \nvalue issued by the service or an update will fail.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "HealthDataRecord"
          ]
        }
      }
    },
    "Image": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "description": "An URL to an image. It is strongly recommended that the image be an SVG (vector graphics, \nre-scalable to the target device's screen size and resolution), at least 600 by 400 pixels \nin size, if not larger (some phones have screens of up to 800 or more pixels across the \nscreen).\n"
        },
        "width": {
          "type": "integer",
          "description": "The width of the image in pixels. If image is present, this field is required."
        },
        "height": {
          "type": "integer",
          "description": "The height of the image in pixels. If image is present, this field is required."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Image"
          ]
        }
      }
    },
    "Message": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "PasswordPolicy": {
      "type": "object",
      "required": [
        "minLength"
      ],
      "properties": {
        "minLength": {
          "type": "integer",
          "minimum": 2,
          "maximum": 100,
          "default": 8,
          "description": "The minimum number of characters that's required in the password."
        },
        "numericRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one number required in the password? (0-9)."
        },
        "symbolRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one ASCII symbol (non-letter, non-number) required in the \npassword? (! \" # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \\ ] ^ _ ` { ¦ } ~).\n"
        },
        "lowerCaseRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one lower-case letter required? (a-z)."
        },
        "upperCaseRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one upper-case letter required? (A-Z)."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "PasswordPolicy"
          ]
        }
      }
    },
    "PasswordReset": {
      "type": "object",
      "required": [
        "password",
        "sptoken"
      ],
      "properties": {
        "password": {
          "type": "string",
          "description": "New password to use."
        },
        "sptoken": {
          "type": "string",
          "description": "This is a one-time use token issued to the user to change his or her password. \nNormally this is emailed to the user's email account, using a link back to the \nBridge web interface where it is extracted to complete this API call.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "PasswordReset"
          ]
        }
      }
    },
    "RecordExportStatusRequest": {
      "type": "object",
      "required": [
        "recordIds",
        "synapseExporterStatus"
      ],
      "properties": {
        "recordIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "synapseExporterStatus": {
          "type": "string",
          "enum": [
            "not_exported",
            "succeeded"
          ]
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "RecordExportStatusRequest"
          ]
        }
      }
    },
    "ReportData": {
      "type": "object",
      "required": [
        "date",
        "data"
      ],
      "properties": {
        "healthCode": {
          "type": "string",
          "description": "**Worker submissions only.** Developers submit report data to an endpoint that \nincludes the user's ID, but workers processing anonymized data do not know a \nparticipant's ID. So the healthCode must be included as part of the report JSON \npayload.\n"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date (YYYY-MM-DD) of the report data."
        },
        "data": {
          "type": "object",
          "description": "An arbitrary JSON object containing whatever data should be saved for a report."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ReportData"
          ]
        }
      }
    },
    "ReportDataWithHealthCode": {
      "type": "object",
      "required": [
        "date",
        "data",
        "healthCode"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date"
        },
        "data": {
          "type": "object"
        },
        "healthCode": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ReportData"
          ]
        }
      }
    },
    "ReportIndex": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The report identifier."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ReportIndex"
          ]
        }
      }
    },
    "RequestInfo": {
      "type": "object",
      "required": [
        "userId",
        "studyIdentifier"
      ],
      "properties": {
        "userId": {
          "type": "string"
        },
        "clientInfo": {
          "$ref": "#/definitions/ClientInfo"
        },
        "userAgent": {
          "type": "string"
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userDataGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activitiesAccessedOn": {
          "type": "string",
          "format": "date-time"
        },
        "signedInOn": {
          "type": "string",
          "format": "date-time"
        },
        "timeZone": {
          "type": "string"
        },
        "studyIdentifier": {
          "$ref": "#/definitions/StudyIdentifier"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ClientInfo"
          ]
        }
      }
    },
    "Schedule": {
      "type": "object",
      "required": [
        "label",
        "scheduleType",
        "times",
        "activities",
        "persistent"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "A label to describe this schedule."
        },
        "scheduleType": {
          "type": "string",
          "enum": [
            "once",
            "recurring",
            "persistent"
          ]
        },
        "eventId": {
          "type": "string",
          "description": "A string indicating the event against which a schedule will be schedules. By default if no eventId is \nprovided, schedules are done against the date and time of the user's enrollment in the study. \nA comma-delimited list of events may be provided, and if so, the system will look for each event in \nturn until an event is found. If any event is provided, the user's enrollment date will not be used \nas a fallback, so this may need to be specified explicitly for some scheduling scenarios.\n"
        },
        "delay": {
          "type": "string",
          "description": "ISO 8601 duration string. An amount of time to wait before scheduling the first task. If the delay is \nzero or not included, and you are using an interval to schedule, then the first task will happen at the \nsame time as the reference event.\n"
        },
        "interval": {
          "type": "string",
          "description": "An ISO 8601 duration, describing the period in days between tasks (it can be days, weeks, months or \neven years, but should not be smaller than a day). If this is used, cronTrigger should not be used.\n"
        },
        "expires": {
          "type": "string",
          "description": "ISO 8601 duration string. The period of time after which an unstarted, scheduled activity should be \nremoved from the application (if it has not been started, no data will have been saved on the server). \nThis is useful for recurring schedules where the user should not be prompted for a task or schedule \nuntil the next occurrence of the schedule.\n"
        },
        "cronTrigger": {
          "type": "string",
          "description": "A cron expression will schedule recurring tasks according to this standard syntax for describing event \nschedules from the Unix operating system. The format of the cron expression is the seven field format \nas described in the documentation for the Java Quartz Scheduler (note that there are other formats \nthat take up to eleven fields, this online cron expression generator creates expressions in the right \nformat). If this is used, the interval and times are ignored\n"
        },
        "startsOn": {
          "type": "string",
          "description": "The scheduler will not create a task before this date and time.",
          "format": "date-time"
        },
        "endsOn": {
          "type": "string",
          "description": "The scheduler will not create a task after this date and time. **Note that \nthis takes precedence over the minimumPerSchedule setting that can be provided via the API. Tasks will \nnot be \"topped up\" to this minimum if they extend outside of this time window.**\n",
          "format": "date-time"
        },
        "times": {
          "type": "array",
          "description": "Required if an interval is specified (ignored if a cron expression is specified). An array of one or \nmore ISO 8601 time values. This is a time of the day (without reference to a specific date and time), \ne.g. \"14:00\" for 2pm in local time. If times are provided, one task will be created for each time on the \nday determined by the application of the interval, for each activity in the schedule. If the schedule \noccurs once, only the first time will be used to schedule the task (and if no time is provided, the \noriginal time of the triggering event will be used; it's clearest to set a time).\n",
          "items": {
            "type": "string",
            "description": "24hr time value(s) without a time zone (e.g. \"14:30\"). **Each time value will create a \nseparate task, one for each activity in the schedule.**\n"
          }
        },
        "persistent": {
          "type": "boolean",
          "description": "True if schedule type is true."
        },
        "activities": {
          "type": "array",
          "description": "One or more activities that should be done by a participant on this schedule. \nEach activity will generate a separate task. See Activity.\n",
          "items": {
            "$ref": "#/definitions/Activity"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Schedule"
          ]
        }
      }
    },
    "ScheduleCriteria": {
      "type": "object",
      "required": [
        "criteria",
        "schedule"
      ],
      "properties": {
        "criteria": {
          "$ref": "#/definitions/Criteria"
        },
        "schedule": {
          "$ref": "#/definitions/Schedule"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ScheduleCriteria"
          ]
        }
      }
    },
    "SchedulePlan": {
      "type": "object",
      "required": [
        "guid",
        "label",
        "strategy"
      ],
      "properties": {
        "guid": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "strategy": {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        "version": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "SchedulePlan"
          ]
        }
      }
    },
    "ScheduleStrategy": {
      "type": "object",
      "discriminator": "type",
      "description": "This is an interface for several implementations"
    },
    "ScheduledActivity": {
      "description": "Description of an activity (such as a task or survey) the study would like the participant to perform. \nA scheduled activity will contain a reference to a task or survey, but not both, and the activityType \nwill reflect which property exists on the activity (e.g. if a task is defined, the activityType will be \n\"task\"). \n",
      "type": "object",
      "required": [
        "guid",
        "schedulePlanGuid",
        "activity",
        "scheduledOn",
        "persistent",
        "status",
        "type"
      ],
      "properties": {
        "guid": {
          "type": "string"
        },
        "schedulePlanGuid": {
          "type": "string"
        },
        "startedOn": {
          "type": "string",
          "format": "date-time"
        },
        "finishedOn": {
          "type": "string",
          "format": "date-time"
        },
        "scheduledOn": {
          "type": "string",
          "format": "date-time"
        },
        "expiresOn": {
          "type": "string",
          "format": "date-time"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "persistent": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "description": "The activities returned from this endpoint will be `scheduled` (will happen in the future); \n`available` (user can do the activity now); or `started` (the client has updated the activity to \nindicate it has been started). Activities are not returned from the API if they are `deleted` \nor `finished`.\n",
          "enum": [
            "deleted",
            "finished",
            "started",
            "expired",
            "scheduled",
            "available"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "ScheduledActivity"
          ]
        }
      }
    },
    "SharingScope": {
      "type": "object",
      "required": [
        "scope"
      ],
      "properties": {
        "scope": {
          "type": "string",
          "description": "One of three values:\n\n|Value|Description|\n|---|---|\n|no_sharing|Don't share data generated by this participant.|\n|sponsors_and_partners|Share data in data sets that are available to the study researchers and their researcher partners only.|\n|all_qualified_researchers|Share data with researchers who qualify under the specific governance qualifications to access the study's data set. These researchers may do research on new questions after the lifetime of the initial research.|\n",
          "enum": [
            "no_sharing",
            "sponsors_and_partners",
            "all_qualified_researchers"
          ]
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "SharingScope"
          ]
        }
      }
    },
    "SignIn": {
      "type": "object",
      "required": [
        "study",
        "email",
        "password"
      ],
      "properties": {
        "study": {
          "type": "string",
          "description": "Study identifier of the participant's study"
        },
        "email": {
          "type": "string",
          "description": "User's email address"
        },
        "password": {
          "type": "string",
          "description": "User's password"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "SignIn"
          ]
        }
      }
    },
    "SignUp": {
      "allOf": [
        {
          "$ref": "#/definitions/AbstractStudyParticipant"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "study",
            "email",
            "password"
          ]
        },
        {
          "properties": {
            "study": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "SignUp"
              ]
            }
          }
        }
      ]
    },
    "SimpleScheduleStrategy": {
      "description": "The SimpleScheduleStrategy uses the same schedule for every participant. It is the easiest way to \nschedule activities and is a good place to start when building a schedule.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "schedule",
            "type"
          ]
        },
        {
          "properties": {
            "schedule": {
              "$ref": "#/definitions/Schedule"
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "SimpleScheduleStrategy"
              ]
            }
          }
        }
      ]
    },
    "Study": {
      "type": "object",
      "required": [
        "name",
        "sponsorName",
        "supportEmail",
        "technicalEmail",
        "consentNotificationEmail",
        "identifier"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "A label for the study. This will be shown to users in emails and other contexts."
        },
        "sponsorName": {
          "type": "string",
          "description": "The name of the institution or organization that is conducting the study. Emails will be sent \"from\" this entity."
        },
        "supportEmail": {
          "type": "string",
          "description": "The email address that will be given to study participants and other end user for all support requests and queries (technical, study-related, etc.). This can be a comma-separated list of email addresses. \n"
        },
        "technicalEmail": {
          "type": "string",
          "description": "The email address for a technical contact who can coordinate with the Bridge Server team on issues related either to client development or hand-offs of the study data through the Bridge server. This can be a comma-separated list of email addresses.\n"
        },
        "consentNotificationEmail": {
          "type": "string",
          "description": "Copies of all consent agreements, as well as rosters of all participants in a study, or any other study governance issues, will be emailed to this address. This can be a comma-separated list of email addresses.\n"
        },
        "identifier": {
          "type": "string",
          "description": "A user selected identifier that is unique relative to all other Bridge studies (lower-case letters and dashes only). The identifier serves as a \"domain\" that scopes accounts to that study, and is usually created by combining an institution and study tag or acronym. For example, if your work at the University of Washington and your study is on Asthma in Children, your identifier might be uw-child-asthma. Users will not see this identifier.\n"
        },
        "version": {
          "type": "integer",
          "description": "A version number used for optimistic locking of the object these keys represent; this value must be passed back to the server on subsequent updates. An error will be returned (409 Conflict) if the object has been updated since it was retrieved by this client.\n"
        },
        "minAgeOfConsent": {
          "type": "integer",
          "default": 18,
          "description": "The minimum required age for participants in the study. If the user reports they are younger than this age, they will not be allowed to consent to the research.\n"
        },
        "synapseDataAccessTeamId": {
          "type": "integer",
          "description": "Synapse team ID that is granted read access to exported health data records.\n"
        },
        "synapseProjectId": {
          "type": "integer",
          "description": "The Synapse project to export health data records to."
        },
        "usesCustomExportSchedule": {
          "type": "boolean",
          "description": "By default, all studies are exported using the default nightly schedule. Some studies may need custom schedules for hourly or on-demand exports. To prevent this study from being exported twice (once by the custom schedule, once by the default schedule), you should set this attribute to true.\n"
        },
        "userProfileAttributes": {
          "type": "array",
          "description": "Custom attributes that can be added to the StudyParticipant object (as members of the attributes property). This data can be personally identifying health information; it will be stored encrypted and in a separate data store from the participant's health data.\n",
          "items": {
            "type": "string"
          }
        },
        "taskIdentifiers": {
          "type": "array",
          "description": "An enumerated list of **unique** strings that can be used to identify tasks when creating schedules. These mostly serve to prevent typos when designing schedules, which would prevent client scheduling from working. There's no hard limit on the string content (e.g. \"Tapping Test\" is fine as a task identifier, as long as it uniquely identifies a task known to the application).\n",
          "items": {
            "type": "string"
          }
        },
        "dataGroups": {
          "type": "array",
          "description": "An enumerated list of **unique** strings that can be assigned to user accounts. These \"tags\" will be exported with a participant's health data to Synapse. This can be used to identify test users or specific cohorts in the study, but it should not include sensitive health information about participants. Strings must contain only letters, numbers, underscore or dash, and cannot (as a comma-separated list) exceed the character limit of 100 characters so they can be exported to Synapse.\n",
          "items": {
            "type": "string"
          }
        },
        "passwordPolicy": {
          "description": "Settings that will govern what is accepted as a valid password when users sign up for the study. If not included, the password policy will default to requiring 8 characters, including lower and upper-case letters, at least one number and at least one symbol.\n",
          "$ref": "#/definitions/PasswordPolicy"
        },
        "verifyEmailTemplate": {
          "description": "The template for emails delivered to users during sign up, asking them to verify their email address.\n",
          "$ref": "#/definitions/EmailTemplate"
        },
        "resetPasswordTemplate": {
          "description": "The template for emails delivered to users who ask to reset their passwords.",
          "$ref": "#/definitions/EmailTemplate"
        },
        "active": {
          "type": "boolean"
        },
        "strictUploadValidationEnabled": {
          "description": "True if uploads in this study should fail on strict validation errors.",
          "type": "boolean"
        },
        "healthCodeExportEnabled": {
          "type": "boolean",
          "description": "**Admin only; read-only for developers.** Should user health codes be exported as part of the participant roster? This identifies users in the public data set; this can only be set to true for certain studies where users expect to be identified by researchers.\n"
        },
        "emailVerificationEnabled": {
          "type": "boolean",
          "description": "**Admin only; read-only for developers.** Should users be asked to validate that they control the email addresses they use to sign up for the study? True by default.\n"
        },
        "externalIdValidationEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Should external identifiers be validated? If this is false, then the external ID is treated as an unconstrained string. If this is true, the study designer will need to enter the list of valid codes into Bridge. Bridge will ensure that the following is true:\n\n* If assigned, the ID will have to match one of the IDs entered into Bridge;\n* A given ID will be assigned to one and only one user\n* Once assigned, it is not possible to change or remove the external ID from the user account\n"
        },
        "minSupportedAppVersions": {
          "type": "object",
          "description": "Minimum supported app versions (older versions will be blocked), keyed by the \nname of the operating system (we expect either \"Android\" or \"iPhone OS\" in the \nUser-Agent header of all requests sent to the server). Example: `{\"iPhone OS\":14,\"Android\":10}`\n",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Study"
          ]
        }
      }
    },
    "StudyConsent": {
      "type": "object",
      "description": "For historical reasons, a revision of a consent document is known as a \"study consent\" (it would more accurately be named a \"subpopulation consent\" at this point). It is a revision of a consent document that is associated with a specific study subpopulation.\n",
      "required": [
        "subpopulationGuid",
        "createdOn",
        "documentContent"
      ],
      "properties": {
        "subpopulationGuid": {
          "type": "string",
          "description": "The guid of the subpopulation to which this consent belongs."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time the document was created on the server, represented in ISO 8601 \nformat (e.g. 2011-12-03T22:11:34.554Z). Each update of the consent document \ncreates a new revision at a new `createdOn` timestamp.\n"
        },
        "documentContent": {
          "type": "string",
          "description": "A valid XHTML document describing the consent. In this document, the following tokens can be inserted and they will be substituted with the user's consent information when the consent is requested for that user:\n\n|Template variable|Substituted with|\n|---|---|\n|${studyName}|The name of the study|\n|${supportEmail}|The support email address for the study|\n|${technicalEmail}|The technical contact/support email address for the study|\n|${sponsorName}|The name of the sponsor for this study (the institution or research team name)|\n\n**Note:** calls that return lists of these study consents do not populate this field. You must retrieve an individual study consent to get the content of the consent.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "StudyConsent"
          ]
        }
      }
    },
    "StudyIdentifier": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "StudyIdentifier"
          ]
        }
      }
    },
    "StudyParticipant": {
      "allOf": [
        {
          "$ref": "#/definitions/AbstractStudyParticipant"
        },
        {
          "description": "Full record about a study participant\n"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "consentHistories"
          ]
        },
        {
          "properties": {
            "healthCode": {
              "type": "string",
              "readOnly": true,
              "description": "Only included in studies that have been configured to return the health code, and only to researchers\nthrough the researcher APIs.\n"
            },
            "consentHistories": {
              "type": "object",
              "readOnly": true,
              "additionalProperties": {
                "$ref": "#/definitions/UserConsentHistory"
              }
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "StudyParticipant"
              ]
            }
          }
        }
      ]
    },
    "Subpopulation": {
      "type": "object",
      "description": "A subpopulation (usually a consent group). \n",
      "required": [
        "guid",
        "name",
        "criteria",
        "required",
        "defaultGroup",
        "version"
      ],
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "criteria": {
          "$ref": "#/definitions/Criteria"
        },
        "required": {
          "type": "boolean",
          "description": "is the user required to sign the consent agreement for this subpopulation?"
        },
        "defaultGroup": {
          "type": "boolean",
          "description": "is this the default subpopulation for the study (there must alwasy be at least one, though it does not need to be required)"
        },
        "publishedConsentCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "the createdOn timestamp of the currently published consent for this subpopulation"
        },
        "version": {
          "type": "integer"
        },
        "consentHTML": {
          "type": "string",
          "description": "The URL to the location of the published consent HTML document for this subpopulation"
        },
        "consentPDF": {
          "type": "string",
          "description": "The URL to the location of the published consent PDF document for this subpopulation"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Subpopulation"
          ]
        }
      }
    },
    "Survey": {
      "type": "object",
      "description": "A survey",
      "required": [
        "guid",
        "name",
        "identifier",
        "published",
        "createdOn",
        "version",
        "elements"
      ],
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of this survey. The name can be changed after creation, and should not \nappear in the UI.\n"
        },
        "identifier": {
          "type": "string",
          "description": "A private name for the survey, only visible to researchers, used to identify \nthe survey on export. It is recommended (but not required) that this identifier \nbe unique for this survey type within this study.\n"
        },
        "published": {
          "type": "boolean",
          "description": "Is this survey version published? Once published, a survey version may not be \nmodified, but can be scheduled for presentation to users.\n"
        },
        "schemaRevision": {
          "type": "integer",
          "description": "The corresponding schema revision that Bridge server parses against to export \nto Synapse.\n"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The ISO 8601 date on which this version of this survey was created."
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when this version of the survey was last modified."
        },
        "version": {
          "type": "integer",
          "description": "The version of this survey as used to implement optimistic locking. This must \nbe passed back to the server on an update, unmodified, in order for the update \nto succeed. If the survey has been concurrently modified, the update will throw \nan error.\n"
        },
        "elements": {
          "type": "array",
          "description": "An ordered collection of SurveyElement sub-types (the order the questions will \nappear in the survey).\n",
          "items": {
            "discriminator": "type",
            "$ref": "#/definitions/SurveyElement"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Survey"
          ]
        }
      }
    },
    "SurveyElement": {
      "type": "object",
      "description": "A survey element (info screen or question)",
      "discriminator": "type",
      "required": [
        "guid",
        "identifier"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "description": "A unique GUID for this element of the survey"
        },
        "identifier": {
          "type": "string",
          "description": "A unique identifier, assigned by a researcher, that is maintained through later \nversions of the survey. This is not as useful as the identifier which is exported \nfor a question, but can be used to retrieve the screen for subsequent edits.\n"
        }
      }
    },
    "SurveyInfoScreen": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/SurveyElement"
        },
        {
          "required": [
            "title",
            "prompt"
          ]
        },
        {
          "properties": {
            "title": {
              "type": "string",
              "description": "A title for this screen."
            },
            "prompt": {
              "type": "string",
              "description": "The main instructions or information text for the user"
            },
            "promptDetail": {
              "type": "string",
              "description": "Further information on the instructions, displayed in a secondary manner to \nthe prompt (smaller text, more button, etc.).\n"
            },
            "image": {
              "description": "An optional Image element describing an image to show for this screen.",
              "$ref": "#/definitions/Image"
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "SurveyInfoScreen"
              ]
            }
          }
        }
      ]
    },
    "SurveyQuestion": {
      "description": "A question in the survey.\n",
      "allOf": [
        {
          "$ref": "#/definitions/SurveyElement"
        },
        {
          "required": [
            "title",
            "identifier",
            "prompt",
            "constraints",
            "uiHint"
          ]
        },
        {
          "properties": {
            "identifier": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "prompt": {
              "type": "string"
            },
            "promptDetail": {
              "type": "string"
            },
            "fireEvent": {
              "type": "boolean"
            },
            "uiHint": {
              "type": "string",
              "description": "A string \"hint\" to the user interface about the kind of user interface component that should be used to render the question (see values, above). The survey designer provides this hint, but the client application may ignore it or map it to a different set of controls, as desired. For a given data type, there is a defined subset of valid UI hints, which are detailed in the constraints model object documentation.\n\n|Hint|Description|Conditions|\n|---|---|---|\n|checkbox|A checkbox that can be used for a boolean value, or for selecting zero or more multiple values from an enumerated list.|Question will always include an enumeration of answers to display.|\n|combobox|An input that allows a user to enter free form text, or select from an enumerated list of answers. An alternative representation would be a set of radio buttons, with the last button selecting an \"other\" option with an associated text input control.|Question will always include an enumeration of answers to display.|\n|datepicker|A control that allows a user to select a date (with no time of day component).||\n|datetimepicker|A control that allows a user to select a time of day on a specific date. It should default to the current day and allow easy selection of a time of day today.||\n|list|A control that shows a list, and allows for selection of zero or more elements. On some platforms, this is the same as a list of checkboxes (and in HTML can be rendered with a multiple select control).|Question will always include an enumeration of answers to display.|\n|multilinetext|A control for entering longer texts, at least showing multiple lines for input and possibly also providing additional controls (such as a simple WYSIWYG editor with cut-and-paste support or spell checking).||\n|numberfield|An input for entering numbers that includes \"spinner\" controls to increment or decrement a numeric value. The minimum and maximum values, as well as the amount the value is changed by these controls, should be defined by the minValue, maxValue, and step constraints of integer and decimal questions.||\n|radiobutton|Two or more controls that allow for exclusive selection of one item from a list of choices.This can be achieved as well through a list where only one item may be selected.|Question will always include an enumeration of answers to display.|\n|select|A select or picker control for selection of one option from a list of options.|Question will always include an enumeration of answers to display.|\n|slider|A slider control for selection of a continuous value, like a decimal number, or a scale control for selection either of a discrete value such as an integer or a set of string values (where such values are ordered and make sense in this presentation, e.g. \"no pain\" to \"extremely painful\"). If used for an integer or decimal question, the minimum and maximum value constraints, as well as the step constraint, should be used to define the behavior of the slider. If used for an enumerated set of values, each discrete setting of the control (it should not slide continuously) should select a value from the list.|Question **must** include an enumeration of answers to display if the data type is not integer or decimal.|\n|textfield|A single line text field. Note that if there are set values for this textfield, but the user can essentially enter an \"other\" value as well, then the combobox hint with a set of enumerated values should be used.||\n|timepicker|An input for entering a time with no reference to the date of the time.||\n|toggle|A switch or toggle control to select a boolean state||\n",
              "enum": [
                "checkbox",
                "combobox",
                "datepicker",
                "datetimepicker",
                "list",
                "multilinetext",
                "numberfield",
                "radiobutton",
                "select",
                "slider",
                "textfield",
                "timepicker",
                "toggle"
              ]
            },
            "constraints": {
              "$ref": "#/definitions/Constraints"
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "SurveyQuestion"
              ]
            }
          }
        }
      ]
    },
    "SurveyQuestionOption": {
      "type": "object",
      "required": [
        "label"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The text to show in the UI (must be plain text)."
        },
        "detail": {
          "type": "string",
          "description": "Detail text shown in a de-emphasized way near the label in the UI (must be plain text).\n"
        },
        "value": {
          "type": "string",
          "description": "The value to submit when this option is selected. The value is always a string, but should \nbe convertible to the data type of the question's constraints.\n"
        },
        "image": {
          "$ref": "#/definitions/Image",
          "description": "An optional Image element describing an image to show for this option. It should be shown \nalong with the label (which will still be required).\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "SurveyQuestionOption"
          ]
        }
      }
    },
    "SurveyReference": {
      "type": "object",
      "description": "A pointer to a survey defined for this study, and associated with a survey to be taken as part of the mobile application health study. If the createdOn value is null, the the user should take the most recently published version of this survey (this is reflected in the href attribute).",
      "required": [
        "identifier",
        "guid",
        "href"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The survey identifier. This value is required [TODO verify this is still true.]"
        },
        "guid": {
          "type": "string",
          "description": "The survey guid"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The createdOn timestamp of the version of the survey. This can be null, which \nindicates the most recently published version of the study should be used.\n"
        },
        "href": {
          "type": "string",
          "description": "An URL to retrieve the appropriate survey version."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "SurveyReference"
          ]
        }
      }
    },
    "SurveyRule": {
      "description": "A constraint may have one or more rules in an array:\n* Rules should be evaluated after a user answers a question, against the answer provided by the user;\n* they should be evaluated until one matches (then further evaluation should be aborted);\n* if a rule matches, the action for that rule should be followed (e.g. showing a different question than the next question in the list, or end the survey);\n* if a question allows multiple answers to be submitted, it matches the rule if any of the submitted answers match the rule;\n* if there are no rules or no rule matches, proceed to the next question in the list.\n",
      "type": "object",
      "required": [
        "operator",
        "value"
      ],
      "properties": {
        "operator": {
          "type": "string",
          "description": "|Value|Operator meaning|\n|---|---|\n|eq|equal to|\n|ne|not equal to|\n|lt|less than|\n|gt|greater than|\n|le|less than or equal to|\n|ge|greater than or equal to|\n|de|user declines to answer this question (it is being skipped)|\n",
          "enum": [
            "eq",
            "ne",
            "lt",
            "gt",
            "le",
            "ge",
            "de"
          ]
        },
        "value": {
          "type": "string",
          "description": "The value submitted by the user (as a string)."
        },
        "skipToTarget": {
          "type": "string",
          "description": "The property will reference an identifier for a question in the survey. The user's next question should be that question, and progress through the survey should proceed from that question in the list. It is guaranteed that the referenced question will be after the current question in the survey.\n"
        },
        "endSurvey": {
          "type": "boolean",
          "description": "If present, this property must be true and no skipTo value should be provided. \nIf the rule matches, immediately end the survey. (An alternative is to have the \nfinal screen of your survey be an info screen with a thank you note, and you can \nskipTo that).\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "SurveyRule"
          ]
        }
      }
    },
    "TaskReference": {
      "type": "object",
      "description": "A pointer to a task identifier defined for this study, and associated with a task to be performed as part of the mobile application health study (e.g. a walking test).",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The identifier that defines a task on the client. Note that this value is conventional; \nit needs to be defined for a study but has no further meaning on the server. \n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "TaskReference"
          ]
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "schemaId",
        "schemaRevision",
        "status",
        "requestedOn"
      ],
      "properties": {
        "schemaId": {
          "type": "string",
          "description": "The GUID assigned to this upload"
        },
        "schemaRevision": {
          "type": "integer",
          "description": "The revision of the schema that was used for this upload."
        },
        "contentLength": {
          "type": "integer",
          "description": "The size of the object in bytes. A standard HTTP header. For more information, \ngo to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13)\n"
        },
        "status": {
          "type": "string",
          "description": "The status of the upload:\n\n|Status|Description|\n|---|---|\n|unknown|Upload status is unknown. This is generally used for older data formats (namely, Upload v1), which had a binary complete flag rather than an UploadStatus.|\n|requested|Initial state. Upload is requested. User needs to upload to specified URL and call uploadComplete.|\n|validation_in_progress|Client process has called uploadComplete. Upload validation is currently taking place.|\n|validation_failed|Upload validation has failed (see the validationMessageList for further details).|\n|succeeded|Upload has succeeded, including validation. Note that export to Synapse is a separate step.|\n",
          "enum": [
            "unknown",
            "requested",
            "validation_in_progress",
            "validation_failed",
            "duplicate",
            "succeeded"
          ]
        },
        "requestedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time (ISO 8601 format) that the client requested an URL to make an upload to the server.\n"
        },
        "completedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time (ISO 8601 format) that the upload was completed.\n"
        },
        "completedBy": {
          "type": "string",
          "description": "Currently the API has an endpoint for the client to call and mark an upload completed. \nHowever, there is also a process that detects uploads to S3 and marks the uploads \ncomplete. This field indicates which client completed the upload.\n",
          "enum": [
            "app",
            "s3_worker"
          ]
        },
        "validationMessageList": {
          "type": "array",
          "description": "An array of error messages if this upload did not pass validation.\n",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Upload"
          ]
        }
      }
    },
    "UploadFieldDefinition": {
      "description": "Note: For legacy reasons, this is the only model object returned from the API that does not have \na type property reflecting the implementation structure of the JSON.\n\n|UploadFieldDefinitionType|Description|\n|---|---|\n|attachment_v2|Attachment. When selected, `fileExtension` and `mimeType` can refine the field definition|\n|boolean|Boolean|\n|calendar_date|Date (no time of day)|\n|timestamp|Date & Time (a timestamp)|\n|float|Decimal|\n|int|Integer|\n|string|String. When selected, `maxLength` and `unboundedText` can refine the field definition|\n|time_v2|Time of Day (no date or timezone)|\n|attachment_blob|Deprecated|\n|attachment_csv|Deprecated|\n|attachment_json_blob|Deprecated|\n|attachment_json_table|Deprecated|\n|duration_v2|Deprecated|\n|inline_json_blob|Deprecated|\n|multi_choice|Deprecated|\n|single_choice|Deprecated|\n",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Field name. A schema cannot contain fields with the same name."
        },
        "required": {
          "type": "boolean",
          "default": true,
          "description": "Whether this field is required."
        },
        "type": {
          "type": "string",
          "description": "Note that this class is unusual in the API in that type is not a constant \n\"UploadFieldDefinition\" value, it is one of the enumerated values and indicates the \ntype of the field, not the type of the model object: \n",
          "enum": [
            "attachment_blob",
            "attachment_csv",
            "attachment_json_blob",
            "attachment_json_table",
            "attachment_v2",
            "boolean",
            "calendar_date",
            "duration_v2",
            "float",
            "inline_json_blob",
            "int",
            "multi_choice",
            "single_choice",
            "string",
            "time_v2",
            "timestamp"
          ]
        },
        "allowOtherChoices": {
          "type": "boolean",
          "description": "Used for MULTI_CHOICE. True if the multi-choice field allows an \"other\" answer with user freeform text. This tells BridgeEX to reserve an \"other\" column for this field. Can be null, so that the number of field parameters doesn't explode.\n"
        },
        "fileExtension": {
          "type": "string",
          "description": "Used for ATTACHMENT_V2 types. Used as a hint by BridgeEX to preserve the file extension as a quality-of-life improvement. Includes the period. Examples: \".json\", \".csv\". Optional, defaults to \".tmp\".\n"
        },
        "mimeType": {
          "type": "string",
          "description": "Used for ATTACHMENT_V2 types. Used as a hint by BridgeEX to mark a Synapse file handle with the correct MIME type as a quality-of-life improvement. Optional, defaults to \"application/octet-stream\".\n"
        },
        "maxLength": {
          "type": "integer",
          "description": "Used for STRING, SINGLE_CHOICE, and INLINE_JSON_BLOB types. This is a hint for BridgeEX to create a Synapse column with the right width.\n\nIf not specified, Bridge will use the default max length of 100 (if applicable).\n"
        },
        "multiChoiceAnswerList": {
          "type": "array",
          "description": "Used for MULTI_CHOICE types. This lists all valid answers for this field. It is used by \nBridgeEX to create the Synapse table columns for MULTI_CHOICE fields. This is a list \nbecause order matters, in terms of Synapse column order. Must be specified if the field \ntype is a MULTI_CHOICE.\n\nFor schemas generated from surveys, this list will be the \"value\" in the survey question \noption, or the \"label\" if value is not specified.\n",
          "items": {
            "type": "string"
          }
        },
        "unboundedText": {
          "type": "boolean",
          "description": "True if this field is a text-field with unbounded length. (Only applies to fields that \nare serialized as text, such as INLINE_JSON_BLOB, SINGLE_CHOICE, or STRING. Can be \nnull, so that the number of field parameters doesn't explode. This flag takes \nprecedence over the maxLength value.\n"
        }
      }
    },
    "UploadRequest": {
      "description": "**Important: Headers of the same values must be used when doing the upload against the pre-signed URL.**\n",
      "type": "object",
      "required": [
        "name",
        "contentLength",
        "contentMd5",
        "contentType"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "File name"
        },
        "contentLength": {
          "type": "integer",
          "description": "The size of the object in bytes. A standard HTTP header. For more information, \ngo to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13)\n"
        },
        "contentMd5": {
          "type": "string",
          "description": "The base64-encoded, 128-bit MD5 digest of the object body."
        },
        "contentType": {
          "type": "string",
          "description": "A standard MIME type. \nFor more information, go to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17)\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "UploadRequest"
          ]
        }
      }
    },
    "UploadSchema": {
      "type": "object",
      "required": [
        "name",
        "revision",
        "schemaId",
        "version",
        "fieldDefinitions"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "User-friendly schema name."
        },
        "revision": {
          "type": "integer",
          "description": "Revision number of the schema, used to distinguish versions of the same data format. \nWhen using this to create or update schemas, to protect against concurrent modification \nerrors, new schemas should not pass in the revision parameter, and updates to existing \nschemas should pass in a revision number equal to the latest revision number.\n"
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier for the schema."
        },
        "surveyGuid": {
          "type": "string",
          "description": "If this schema is created from a survey, this is the GUID of the survey it represents.\n"
        },
        "surveyCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "If this schema is created from a survey, this is the createdOn timestamp \n(in ISO 8601 format) of the survey it represents.\n"
        },
        "schemaType": {
          "type": "string",
          "enum": [
            "ios_data",
            "ios_survey"
          ]
        },
        "version": {
          "type": "integer"
        },
        "fieldDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadFieldDefinition"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "UploadSchema"
          ]
        }
      }
    },
    "UploadSession": {
      "type": "object",
      "required": [
        "id",
        "url",
        "expires"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The upload ID. The client needs to use this ID to call Bridge when the upload is complete.\n"
        },
        "url": {
          "type": "string",
          "description": "A pre-signed URL for doing the upload. The URL will remain valid for 24 hours once created on the Bridge side.\n"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "description": "The ISO 8601 date and time stamp at which this session will expire.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "UploadSession"
          ]
        }
      }
    },
    "UploadValidationStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier for this upload"
        },
        "messageList": {
          "type": "array",
          "description": "An array of error messages if failures occurred during validation\n",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "description": "An enumeration of possible upload outcomes:\n\n|Type|Description|\n|---|---|\n|unknown|Upload status is unknown (used for older formats and not likely to occur).|\n|requested|Upload has been requested. The client has received an URL to post the data to, and the server is waiting for the client to call the upload complete endpoint when that upload has been finished.|\n|validation_in_progress|Client has called upload complete and validation is in progress.|\n|validation_failed|Validation failed. See messageList for errors during validation.|\n|succeeded|Validation succeeded; upload has been accepted by the server.|\n",
          "enum": [
            "unknown",
            "requested",
            "validation_in_progress",
            "validation_failed",
            "duplicate",
            "succeeded"
          ]
        },
        "record": {
          "$ref": "#/definitions/HealthDataRecord"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "UploadValidationStatus"
          ]
        }
      }
    },
    "UserConsentHistory": {
      "description": "A record of a complete consent (including both the dates of consent and withdrawal, if applicable);\n",
      "type": "object",
      "required": [
        "subpopulationGuid",
        "consentCreatedOn",
        "name",
        "birthdate",
        "signedOn",
        "hasSignedActiveConsent"
      ],
      "properties": {
        "subpopulationGuid": {
          "type": "string",
          "readOnly": true,
          "description": "The consent group that the participant agreed to participate in."
        },
        "consentCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 date and time that the consent was created on."
        },
        "name": {
          "type": "string",
          "description": "Name as entered by the participant."
        },
        "birthdate": {
          "type": "string",
          "format": "date",
          "description": "ISO 8601 date string (e.g. \"YYYY-MM-DD\")."
        },
        "imageData": {
          "type": "string",
          "format": "byte",
          "description": "The signature image in a base 64 encoding."
        },
        "imageMimeType": {
          "type": "string",
          "description": "The IANA mime type indicator for the image (e.g. \"image/png\")."
        },
        "signedOn": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 date and time that the consent was signed by the user."
        },
        "withdrewOn": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 date and time that the user withdrew the consent, if the user withdrew \nfrom the study (note that later consent records may re-enroll the user in the \nstudy; nothing prevents users from joining and quitting the study, even multiple times).\n"
        },
        "hasSignedActiveConsent": {
          "type": "boolean",
          "description": "True if the user signed the most recently published version of the consent, false otherwise.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "UserConsentHistory"
          ]
        }
      }
    },
    "UserProfile": {
      "type": "object",
      "description": "An early user information object that has been superceded by the study participant object, along with a new set of API endpoints (`/v3/participants/self`).",
      "required": [
        "email",
        "username"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "description": "Now always the same value as the user's email address"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "UserProfile"
          ]
        }
      }
    },
    "UserSessionInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/AbstractStudyParticipant"
        },
        {
          "description": "Information about the user and their session.\n"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "email",
            "id",
            "sessionToken",
            "dataSharing",
            "notifyByEmail",
            "attributes",
            "sharingScope",
            "createdOn",
            "environment",
            "status",
            "consented",
            "authenticated",
            "signedMostRecentConsent",
            "roles",
            "dataGroups",
            "languages",
            "consentStatuses"
          ]
        },
        {
          "properties": {
            "authenticated": {
              "type": "boolean",
              "description": "Is the user currently authenticated?"
            },
            "sessionToken": {
              "type": "string",
              "description": "The session token that must be returned to the server to access services requiring authentication."
            },
            "environment": {
              "type": "string",
              "description": "This value should always be set to production.",
              "enum": [
                "local",
                "develop",
                "staging",
                "production"
              ]
            },
            "dataSharing": {
              "type": "boolean",
              "description": "true if the sharing scope is anything other than \"no_sharing\"."
            },
            "signedMostRecentConsent": {
              "type": "boolean"
            },
            "consented": {
              "type": "boolean",
              "description": "true if all required consents have been signed"
            },
            "consentStatuses": {
              "type": "object",
              "description": "A mapping from a subpopulation GUID to information about the participant's consent status \nin that subpopulation (whether consented or not).\n",
              "additionalProperties": {
                "$ref": "#/definitions/ConsentStatus"
              }
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "UserSessionInfo"
              ]
            }
          }
        }
      ]
    },
    "Withdrawal": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "description": "An optional, free text description from the participant about why they are no longer participating in the study. Some applications provide a more structured form to the user, and convert this to a text response.\n\nThe reason will be emailed to the consent notification email as part of the notification that a particular user has withdrawn from the study.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Withdrawal"
          ]
        }
      }
    },
    "InvalidEntityException": {
      "description": "A response to submission of a JSON payload that is not valid. The errors \n",
      "type": "object",
      "required": [
        "statusCode",
        "errors",
        "entityClass",
        "entity"
      ],
      "properties": {
        "statusCode": {
          "type": "integer"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "entityClass": {
          "type": "string"
        },
        "entity": {
          "type": "object"
        }
      }
    },
    "ResourceList_AccountSummary": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AccountSummary"
          }
        },
        "offsetBy": {
          "type": "integer",
          "readOnly": true,
          "description": "The offsetBy value submitted to the server"
        },
        "pageSize": {
          "type": "integer",
          "readOnly": true,
          "description": "The page size submitted to the server"
        },
        "emailFilter": {
          "type": "string",
          "readOnly": true,
          "description": "The email filter submitted to the server"
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records that match the criteria (may exceed page size)"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "PagedResourceList"
          ]
        }
      }
    },
    "ResourceList_Activity": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ScheduledActivity"
          }
        },
        "offsetKey": {
          "type": "string",
          "readOnly": true,
          "description": "If present, the key that should be sent in the next request to page forward one page of records. If null, this is the final page of records"
        },
        "pageSize": {
          "type": "integer",
          "readOnly": true,
          "description": "The page size submitted to the server"
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records that match the criteria (may exceed page size)"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "PagedResourceList"
          ]
        }
      }
    },
    "ResourceList_ExternalIdentifier": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ExternalIdentifier"
          }
        },
        "pageSize": {
          "type": "integer",
          "readOnly": true
        },
        "offsetKey": {
          "type": "string",
          "readOnly": true
        },
        "idFilter": {
          "type": "string",
          "readOnly": true
        },
        "offsetFilter": {
          "type": "string",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DateRangeResourceList"
          ]
        }
      }
    },
    "ResourceList_ReportData": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ReportData"
          }
        },
        "startDate": {
          "type": "string",
          "readOnly": true,
          "format": "date"
        },
        "endDate": {
          "type": "string",
          "readOnly": true,
          "format": "date"
        },
        "total": {
          "type": "integer",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DateRangeResourceList"
          ]
        }
      }
    },
    "ResourceList_ReportIndex": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ReportIndex"
          }
        },
        "reportType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "study",
            "participant"
          ]
        },
        "total": {
          "type": "integer",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ReportTypeResourceList"
          ]
        }
      }
    },
    "ResourceList_Schedule": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Schedule"
          }
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ResourceList"
          ]
        }
      }
    },
    "ResourceList_SchedulePlan": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SchedulePlan"
          }
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ResourceList"
          ]
        }
      }
    },
    "ResourceList_Study": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Study"
          }
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ResourceList"
          ]
        }
      }
    },
    "ResourceList_StudyConsent": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/StudyConsent"
          }
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ResourceList"
          ]
        }
      }
    },
    "ResourceList_Subpopulation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Subpopulation"
          }
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records in the items list."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ResourceList"
          ]
        }
      }
    },
    "ResourceList_Survey": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Survey"
          }
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ResourceList"
          ]
        }
      }
    },
    "ResourceList_Upload": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Upload"
          }
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The startTime value submitted to the server"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The endTime value submitted to the server"
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records that match the criteria (may exceed page size)"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DateTimeRangeResourceList"
          ]
        }
      }
    },
    "ResourceList_UploadSchema": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/UploadSchema"
          }
        },
        "total": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of records in the list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ResourceList"
          ]
        }
      }
    },
    "Constraints": {
      "type": "object",
      "discriminator": "type",
      "required": [
        "rules"
      ],
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SurveyRule"
          }
        }
      }
    },
    "MultiValueConstraints": {
      "description": "User must select a response from a list of options (however the question can allow for a \nfree-form \"other\" value to be provided instead if the user wishes). This is common question \ntype with many possible UI renderings, but the constraints can help to limit the choices:  \n\n|uiHint|Description|\n|---|---|\n|checkbox, list|`allowMultiple` = true|\n|combobox|`allowMultiple` = false, `allowOther` = true|\n|radiobutton, select, slider|`allowMultiple` = false, `allowOther` = false|\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowOther": {
              "type": "boolean",
              "description": "true if the user should be able to enter another value besides those provided in the\nenumeration, false otherwise. If set to true, then the user's answer must be of the \nright data type, but no other validation occurs.\n"
            },
            "allowMultiple": {
              "type": "boolean",
              "description": "Can multiple values be returned as an answer? True if the client should submit multiple\nvalues, false otherwise.\n"
            },
            "enumeration": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SurveyQuestionOption"
              }
            },
            "dataType": {
              "type": "string",
              "description": "The value should be \"multivalue\"; **all the answers to this question are submitted as strings.**\n",
              "enum": [
                "multivalue"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "MultiValueConstraints"
              ]
            }
          }
        }
      ]
    },
    "BooleanConstraints": {
      "description": "**UI hints:** checkbox, toggle.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "dataType": {
              "type": "string",
              "enum": [
                "boolean"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "BooleanConstraints"
              ]
            }
          }
        }
      ]
    },
    "IntegerConstraints": {
      "description": "**UI hints:** numberfield, slider.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "type": "string",
              "description": "An optional unit of value.",
              "enum": [
                "seconds",
                "minutes",
                "hours",
                "days",
                "weeks",
                "months",
                "years",
                "inches",
                "feet",
                "yards",
                "miles",
                "ounces",
                "pounds",
                "pints",
                "quarts",
                "gallons",
                "centimeters",
                "meters",
                "kilometers",
                "grams",
                "kilograms",
                "milliliters",
                "cubic_centimeters",
                "liters",
                "cubic_meters"
              ]
            },
            "minValue": {
              "type": "integer",
              "description": "Minimum valid value."
            },
            "maxValue": {
              "type": "integer",
              "description": "Maximum valid value."
            },
            "step": {
              "type": "integer",
              "default": 1,
              "description": "In increase or decrease in valid values, e.g. a step of 5 for a question that \nrecords weight to the nearest 5 pounds.\n"
            },
            "dataType": {
              "type": "string",
              "enum": [
                "integer"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "IntegerConstraints"
              ]
            }
          }
        }
      ]
    },
    "DecimalConstraints": {
      "description": "**UI hints:** numberfield, slider.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "type": "string",
              "enum": [
                "seconds",
                "minutes",
                "hours",
                "days",
                "weeks",
                "months",
                "years",
                "inches",
                "feet",
                "yards",
                "miles",
                "ounces",
                "pounds",
                "pints",
                "quarts",
                "gallons",
                "centimeters",
                "meters",
                "kilometers",
                "grams",
                "kilograms",
                "milliliters",
                "cubic_centimeters",
                "liters",
                "cubic_meters"
              ]
            },
            "minValue": {
              "type": "number",
              "description": "Minimum valid value."
            },
            "maxValue": {
              "type": "number",
              "description": "Maximum valid value."
            },
            "step": {
              "type": "number",
              "description": "In increase or decrease in valid values, e.g. a step of 0.1 for a question that records\nwater drunk in tenths of a liter.\n"
            },
            "dataType": {
              "type": "string",
              "enum": [
                "decimal"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "DecimalConstraints"
              ]
            }
          }
        }
      ]
    },
    "StringConstraints": {
      "description": "A string response. UI Hints for this type should match the intended length of the string \nand any constraints placed upon the length. \n\n**UI hints:** texfield, multilinetext.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "minLength": {
              "type": "integer",
              "description": "The minimum number of characters that should be allowed."
            },
            "maxLength": {
              "type": "integer",
              "description": "The maximum number of characters that should be allowed."
            },
            "pattern": {
              "type": "string",
              "description": "A regular expression pattern (omitting slashes) against with the input \nshould be validated.\n"
            },
            "dataType": {
              "type": "string",
              "enum": [
                "string"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "StringConstraints"
              ]
            }
          }
        }
      ]
    },
    "DateTimeConstraints": {
      "description": "**UI hints:** datetimepicker.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowFuture": {
              "type": "boolean",
              "default": false,
              "description": "Should this question allow answers in the future?"
            },
            "earliestValue": {
              "type": "string",
              "format": "date-time"
            },
            "latestValue": {
              "type": "string",
              "format": "date-time"
            },
            "dataType": {
              "type": "string",
              "enum": [
                "datetime"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "DateTimeConstraints"
              ]
            }
          }
        }
      ]
    },
    "DateConstraints": {
      "description": "A date without a time value (e.g. \"2016-07-28\").\n\n**UI hints:** datepicker.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowFuture": {
              "type": "boolean",
              "default": false,
              "description": "Should this question allow answers in the future?"
            },
            "earliestValue": {
              "type": "string",
              "format": "date",
              "description": "ISO 8601 date and time value that is the earliest value that may be set for this question. \nNo default. If allowFuture is false, that constraint will also be applied regardless \nof earliest/latestValue constraints.\n"
            },
            "latestValue": {
              "type": "string",
              "format": "date",
              "description": "ISO 8601 date and time value that is the earliest value that may be set for this question. \nNo default. If allowFuture is false, that constraint will also be applied regardless \nof earliest/latestValue constraints.\n"
            },
            "dataType": {
              "type": "string",
              "enum": [
                "date"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "DateConstraints"
              ]
            }
          }
        }
      ]
    },
    "TimeConstraints": {
      "description": "This is an ISO 8601 time value, in 24 hour time, milliseconds and seconds are optional, and there \nis no time zone for this value (e.g. 14:45:15.357). This represents a time of the day, regardless \nof where the user is, e.g. \"I take my medications at 3:00pm every day, whether I'm in Chicago or Tokyo.\"\n\n**UI hints:** timepicker.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "dataType": {
              "type": "string",
              "enum": [
                "time"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "TimeConstraints"
              ]
            }
          }
        }
      ]
    },
    "DurationConstraints": {
      "description": "Deprecated. Use an integer value with a unit of measure instead.\n\nDurations should be given as an integer value (not an ISO 8601 duration value). For the time being, a duration string is accepted if the duration is measured in the same time units required by the question. For example, if the question requires minutes, the duration string must be \"PT120M\", not \"PT2H\" or other equivalent values.\n\n**UI hints:** numberfield, slider.\n",
      "required": [
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "type": "string",
              "enum": [
                "seconds",
                "minutes",
                "hours",
                "days",
                "weeks",
                "months",
                "years",
                "inches",
                "feet",
                "yards",
                "miles",
                "ounces",
                "pounds",
                "pints",
                "quarts",
                "gallons",
                "centimeters",
                "meters",
                "kilometers",
                "grams",
                "kilograms",
                "milliliters",
                "cubic_centimeters",
                "liters",
                "cubic_meters"
              ]
            },
            "minValue": {
              "type": "integer",
              "description": "Maximum valid value."
            },
            "maxValue": {
              "type": "integer",
              "description": "Minimum valid value."
            },
            "step": {
              "type": "integer",
              "default": 1,
              "description": "In increase or decrease in valid values, e.g. a step of 5 for a question that records weight \nto the nearest 5 pounds.\n"
            },
            "dataType": {
              "type": "string",
              "enum": [
                "duration"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "DurationConstraints"
              ]
            }
          }
        }
      ]
    }
  },
  "responses": {
    "401": {
      "description": "Authentication required (user not signed in).",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "410": {
      "description": "The version of the client making the request no longer has access to this service. The user \nmust update their app in order to continue using Bridge.\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "412": {
      "description": "User has signed in, but is not consented",
      "schema": {
        "$ref": "#/definitions/UserSessionInfo"
      }
    },
    "200_message": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "201_message": {
      "description": "Created",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "202_message": {
      "description": "Accepted",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_admin": {
      "description": "User cannot access this service because they are not an admin (no admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_admin_developer": {
      "description": "User cannot access this service because they are not a developer or admin (no developer or admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer": {
      "description": "User cannot access this service because they are not a developer (no developer role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer_researcher": {
      "description": "User cannot access this service because they are not a developer or researcher (no developer or researcher role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer_researcher_admin": {
      "description": "User cannot access this service because they do not have an administrative role (no developer, worker or admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer_worker": {
      "description": "User cannot access this service because they are not a developer or worker process \n(no developer or worker role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_researcher": {
      "description": "User cannot access this service because they are not a researcher (no researcher role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_worker": {
      "description": "User cannot access this service because they are not a worker process (no worker role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    }
  }
}
